import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import InputMediaPhoto
import sqlite3
import os
import datetime as DT
from datetime import datetime
import pandas as pd
import time
import json
from cnfg import bot_token_dima

# import django
# from django_last_project.auctions.auction_website.models import Traids
# os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
# django.setup()
# trade = Traids.objects.create(lots=1, trade_info="description", traids_status="traids_status")
# trade.save()



token = bot_token_dima
bot = telebot.TeleBot(token)
PHOTO_DIR = 'photo'
conn = sqlite3.connect('auctions.db', check_same_thread=False)

Main_keyb_dct = {"–ú–æ–∏ –∞—É–∫—Ü–∏–æ–Ω—ã": "menu:my_auc",
                 "–†–æ–∑—ã–≥—Ä—ã—à": "menu:lottery",
                 "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": "menu:top",
                 "–ü—Ä–∞–≤–∏–ª–∞": "menu:rules",
                 "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "menu:stats",
                 "–ü–æ–º–æ—â—å": "menu:help"}
Return_to_menu_keyb_dct = {"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": "menu:main-menu"}
Trade_inline_keyb_dct = {"+20 p.": "bid:20",
                         "+30 p.": "bid:30",
                         "+50 p.": "bid:50",
                         "+100 p.": "bid:100",
                         "+200 p.": "bid:200",
                         "+500 p.": "bid:500"}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def check_db(lot, count, last, user_telegram_id):
    print("–ª–æ—Ç", lot, user_telegram_id)
    try:
        with conn:
            # –ü–æ–ª—É—á–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É
            trade_info_str = [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = {lot}")][0]
    except Exception as e:
        print(e)
    trade_info = json.loads(trade_info_str)
    print("–ò–Ω—Ñ–∞ –ø–æ —Ç–æ—Ä–≥–∞–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã", trade_info)
    current_count_bid = len(trade_info["bid_history"])
    current_last_bid = trade_info["bid_history"][-1]
    print("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –∏–∑ update", count, "—Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏", current_count_bid)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∏–Ω–∞—á–µ False
    if current_count_bid > count and user_telegram_id != current_last_bid:
        return True
    else:
        return False


def create_universal_inline_keyb(dct):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
    Main_inline_keyb = InlineKeyboardMarkup(row_width=1)
    for key, value in dct.items():
        Main_inline_keyb.add(InlineKeyboardButton(f"{key}", callback_data=f"{value}"))
    return Main_inline_keyb


def create_trade_inline_keyb(dct, lot_id):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–æ—Ä–≥–æ–≤, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
    Trade_inline_keyb = InlineKeyboardMarkup(row_width=3)
    trade_buttons = []
    for key, value in dct.items():
        trade_buttons.append(InlineKeyboardButton(f"{key}", callback_data=f"{value}:{lot_id}"))
    Trade_inline_keyb.add(*trade_buttons)
    try:
        with conn:
            user_wallet_info = [i[4] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = {lot_id}")][0]
            trade_info_str = [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = {lot_id}")][
                0]  # –ü–æ–ª—É—á–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É
    except Exception as e:
        print(e)
    if user_wallet_info >= 500:
        Trade_inline_keyb.add(InlineKeyboardButton("–ê–≤—Ç–æ-—Å—Ç–∞–≤–∫–∞", callback_data=f"bid:auto-bid:{lot_id}"))
    bids_dct = json.loads(trade_info_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
    if len(bids_dct) == 0:
        Trade_inline_keyb.add(InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data=f"trade:start_auction:{lot_id}"))
    Trade_inline_keyb.add(InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"trade:update_auction:{lot_id}"))
    Trade_inline_keyb.add(InlineKeyboardButton("\U0001F552", callback_data=f"trade:timeleft:{lot_id}"),
                          InlineKeyboardButton("\U00002139", callback_data=f"trade:info:{lot_id}"))
    return Trade_inline_keyb


@bot.message_handler(commands=['start'])
def start(message):
    # print(message)
    if message.text == "/start":
        bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ @coin_minsk. –Ø –ø–æ–º–æ–≥—É –í–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ª–æ—Ç–∞–º–∏,"
                         "—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ö–æ–¥ –∞—É–∫—Ü–∏–æ–Ω–∞ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –í–∞—à–∏–º–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ –±–∞–ª–∞–º–∏. "
                         "–£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤! ü§ù", reply_markup=create_universal_inline_keyb(Main_keyb_dct))
    if message.text[0:6] == "/start" and len(message.text) > 5:
        print(message.text)
        # global lot_id
        lot_id = message.text.split(' ')[1]
        print("id LOTa", lot_id)
        with conn:
            name = [i[1] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {lot_id}")]
            description = [i[2] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {lot_id}")]
            start_price = [i[3] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {lot_id}")]
            link_seller = [i[4] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {lot_id}")]
            photo_1 = [i[5] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {lot_id}")]
            geolocations = [i[6] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {lot_id}")]
            start_time = [i[7] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {lot_id}")]
            end_time = [i[8] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {lot_id}")]
        result = f"–ù–æ–º–µ—Ä –ª–æ—Ç–∞: {lot_id}\n" \
                 f"–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {name[0]}\n" \
                 f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[0]}\n" \
                 f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {start_price[0]} —Ä—É–±.\n" \
                 f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞: {geolocations[0]}\n" \
                 f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {link_seller[0]}\n"
        print(result)
        current_datetime = DT.datetime.now()
        print(current_datetime)
        # timedelta = pd.Timestamp(end_time) - pd.Timestamp(start_time)
        if datetime.strptime(str(current_datetime)[:19], "%Y-%m-%d %H:%M:%S") < datetime.strptime(end_time[0][:19], "%Y-%m-%d %H:%M:%S"):
            print("–∞—É–∫ –µ—â–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")
            with open(r'C:/Users/voyag/PycharmProjects/django_last_project/django_last_project/auctions/media/' + str(
                    photo_1[0]), "rb") as img:
                bot.send_photo(message.chat.id, photo=img, caption=result,
                               reply_markup=create_trade_inline_keyb(Trade_inline_keyb_dct, lot_id))
            # –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" –∑–∞–ø–∏—à–µ–º —é–∑–µ—Ä–∞ –≤ –±–∞–∑—É –∫–ª–∏–µ–Ω—Ç–æ–≤
            user_telegram_id = message.from_user.id
            user_first_name = message.from_user.first_name
            try:
                with conn:
                    conn.execute("INSERT OR IGNORE INTO Clients (full_name, telegram_id, try_strike) VALUES (?, ?, ?)",
                                 (user_first_name, user_telegram_id, 0))
                conn.commit()
            except Exception as e:
                print(e)
        else:
            print("–∞—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
            try:
                with conn:
                    trade_info_str = [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = "
                                                                 f"{lot_id}")][0]
            except Exception as e:
                print(e)
            trade_info = json.loads(trade_info_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
            msg_id = trade_info["bid_history"][0]
            print("–ò–Ω—Ñ–∞ –ø–æ —Ç–æ—Ä–≥–∞–º", trade_info)
            if len(trade_info["bid_history"]) > 1:
                winner_id = trade_info["bid_history"][-1]
                with conn:
                    winner_name = [i[1] for i in conn.execute(
                        f"SELECT * FROM Clients WHERE telegram_id = {winner_id}")][0]
            else:
                winner_name = "–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç."

            result += f"\n\U0001F3C1–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω.\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}"
            with open(r'C:/Users/voyag/PycharmProjects/django_last_project/django_last_project/auctions/media/' + str(
                    photo_1[0]), "rb") as img:
                bot.send_photo(message.chat.id, photo=img, caption=result)
            with open(r'C:/Users/voyag/PycharmProjects/django_last_project/django_last_project/auctions/media/' + str(
                    photo_1[0]), "rb") as img:
                bot.edit_message_media(media=InputMediaPhoto(img, caption=result), chat_id='@coin_minsk',
                                       message_id=msg_id)  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ


@bot.callback_query_handler(func=lambda call: call.data.split(":"))
def query_handler(call):
    # bot.answer_callback_query(callback_query_id=call.id, )
    print(call.data.split(':'))
    if call.data.split(':')[1] == "main-menu":
        bot.edit_message_text("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ @coin_minsk. –Ø –ø–æ–º–æ–≥—É –í–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ "
                              "–≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ª–æ—Ç–∞–º–∏, –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ö–æ–¥ –∞—É–∫—Ü–∏–æ–Ω–∞. –ê —Ç–∞–∫ –∂–µ –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å "
                              "–∑–∞ –í–∞—à–∏–º–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ –±–∞–ª–∞–º–∏. –£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ ü§ù",
                              call.message.chat.id, call.message.message_id,
                              reply_markup=create_universal_inline_keyb(Main_keyb_dct))

    if call.data.split(':')[1] == "info":
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º")
        bot.answer_callback_query(call.id, "–î–µ–ª–∞—è —Å—Ç–∞–≤–∫—É —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∂–µ–ª–∞–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∫—É–ø–∏—Ç—å –ª–æ—Ç. –í "
                                           "—Å–ª—É—á–∞–µ –Ω–µ–≤—ã–∫—É–ø–∞ –ª–æ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 3-—Ö —Å—É—Ç–æ–∫, —É—á–∞—Å—Ç–Ω–∏–∫ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è.",
                                  show_alert=True)
    if call.data.split(':')[1] == "timeleft":
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–µ–∑–∂–∞—é—â–µ–µ –æ–∫–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º - –≤—Ä–µ–º—è –∞—É–∫—Ü–∏–æ–Ω–∞")
        print(call.data.split(':'))
        current_lot_id = call.data.split(':')[2]
        current_datetime = DT.datetime.now()
        with conn:
            start_time1 = [i[7] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
            end_time2 = [i[8] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
        start_time = datetime.strptime(str(current_datetime)[:19], "%Y-%m-%d %H:%M:%S")  # 2021-10-01 12:00:00
        end_time = datetime.strptime(end_time2[0][:19], "%Y-%m-%d %H:%M:%S")
        timedelta = pd.Timestamp(end_time) - pd.Timestamp(start_time)
        if start_time < end_time:
            bot.answer_callback_query(call.id, f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: "
                                               f"{timedelta.components.days} –¥–Ω–µ–π "
                                               f"{timedelta.components.hours} —á–∞—Å–æ–≤ "
                                               f"{timedelta.components.minutes} –º–∏–Ω—É—Ç "
                                               f"{timedelta.components.seconds} —Å–µ–∫—É–Ω–¥", show_alert=False)
        else:
            bot.answer_callback_query(call.id, f"–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ", show_alert=False)


    if call.data.split(':')[1] == "rules":
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç c –ø—Ä–∞–≤–∏–ª–∞–º–∏")
        bot.edit_message_text("–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –¥–æ–ª–∂–Ω—ã –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤—è–∑—å "
                              "–≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫‚ÄºÔ∏è–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤—ã–∫—É–ø–∏—Ç—å –ª–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –¢–†–Å–• –¥–Ω–µ–π "
                              "–ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞üî•–ù–ï –í–´–ö–£–ü –õ–û–¢–ê - –ü–ï–†–ú–ê–ù–ï–ù–¢–ù–´–ô –ë–ê–ù –í–û –í–°–ï–• "
                              "–ù–£–ú–ò–ó–ú–ê–¢–ò–ß–ï–°–ö–ò–• –°–û–û–ë–©–ï–°–¢–í–ê–• –ò –ê–£–ö–¶–ò–û–ù–ê–•ü§¨ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è "
                              "–æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚è∞ –ê–Ω—Ç–∏ —Å–Ω–∞–π–ø–µ—Ä - –°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–Ω–∞—è –∑–∞ 5 "
                              "–º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –ê—É–∫—Ü–∏–æ–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç –≤–ø–µ—Ä—ë–¥ "
                              "‚ÄºÔ∏è–†–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –§–æ—Ç–æ –º–æ–∂–Ω–æ "
                              "–∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø—Ä–æ–¥–∞–≤—Ü–∞. –°–ª—É—á–∞–π–Ω–æ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É?ü§î –ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥–∞–≤—Ü—É‚ÄºÔ∏è "
                              "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π, —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—â–µ–≥–æ –≤–µ—Å–∞ "
                              "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å—Ç—Ä–∞–Ω—ã. –û–±—Å—É–∂–¥–∞–µ—Ç—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º. –õ–æ—Ç—ã –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ç—å,"
                              "—ç–∫–æ–Ω–æ–º—è –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞ –ø–æ—á—Ç–µ. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä—ë—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã‚ÄºÔ∏è",
                              call.message.chat.id, call.message.message_id,
                              reply_markup=create_universal_inline_keyb(Return_to_menu_keyb_dct))
    if call.data.split(':')[1] == "help":
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç c help")
        bot.edit_message_text("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—É –∞–¥–º–∏–Ω–∞'"
                              "–£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ –∏ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!",
                              call.message.chat.id, call.message.message_id,
                              reply_markup=create_universal_inline_keyb(Return_to_menu_keyb_dct))
    if call.data.split(':')[1] == "my_auc":
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç c info —é–∑–µ—Ä–∞ –ø–æ –∞—É–∫—Ü–∏–æ–Ω–∞–º")
        user_telegram_id = call.message.chat.id
        try:
            with conn:
                trade_info_lst = [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE trades_status = 'finished'")]
        except Exception as e:
            print(e)
        print(trade_info_lst)
        result = ""
        for info in trade_info_lst:
            trade_info = json.loads(info)
            if str(user_telegram_id) in trade_info:
                trade_number = trade_info_lst.index(info) + 1
                max_user_bid = trade_info[str(user_telegram_id)][1]
                number_of_bids = trade_info["bid_history"].count(user_telegram_id)
                try:
                    with conn:
                        lot_id = [i[1] for i in conn.execute(f"SELECT * FROM Trades WHERE id = {trade_number}")][0]
                        lot_name = [i[1] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {lot_id}")][0]
                        max_price = [i[4] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = {trade_number}")][0]
                except Exception as e:
                    print(e)
                if user_telegram_id in trade_info["bid_history"] and trade_info["bid_history"][-1] == user_telegram_id:
                    result += f"–õ–æ—Ç {trade_number}: {lot_name} - –≤—ã–∏–≥—Ä–∞–Ω. –°–¥–µ–ª–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: {number_of_bids}. " \
                              f"–í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {max_price} —Ä—É–±.\n"
                if user_telegram_id in trade_info["bid_history"] and trade_info["bid_history"][-1] != user_telegram_id:
                    result += f"–õ–æ—Ç {trade_number}: {lot_name} -  –Ω–µ –≤—ã–∏–≥—Ä–∞–Ω. –°–¥–µ–ª–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: {number_of_bids}. " \
                              f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {max_user_bid} —Ä—É–±.\n"

        if len(result) > 0:
            result = "–í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–æ—Ä–≥–∞—Ö –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ª–æ—Ç–∞–º:\n" + result
        else:
            result = "–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–æ—Ä–≥–∞—Ö –ª–∏–±–æ —Ç–æ—Ä–≥–∏ –ø–æ –ª–æ—Ç—É –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å\n"
        print(result)
        bot.edit_message_text(f"{result}",
                              call.message.chat.id, call.message.message_id,
                              reply_markup=create_universal_inline_keyb(Return_to_menu_keyb_dct))
    if call.data.split(':')[1] == "lottery":
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç c –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤")
        bot.edit_message_text("‚ÄºÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ –†–æ–∑—ã–≥—Ä—ã—à‚ÄºÔ∏è\n"
                              "–û–±—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ 66000‚ÇΩüî•\n"
                              "–ö–æ–Ω–∫—É—Ä—Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ –í–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∑–∞ –∫–∞–∂–¥—É—é —Å—Ç–∞–≤–∫—É –∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ª–æ—Ç –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ "
                              "@coin_minsk –í–∞–º –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã:\n\n"
                              "–ü–æ–±–µ–¥–Ω–∞—è —Å—Ç–∞–≤–∫–∞|      –ö–æ–ª-–≤–æ –±–∞–ª–ª–æ–≤|\n"
                              "0 - 249‚ÇΩ                  |      1Ô∏è‚É£0Ô∏è‚É£ –±–∞–ª–ª–æ–≤\n"
                              "250 - 499‚ÇΩ             |      2Ô∏è‚É£0Ô∏è‚É£ –±–∞–ª–ª–æ–≤\n"
                              "500 - 999‚ÇΩ             |      3Ô∏è‚É£0Ô∏è‚É£ –±–∞–ª–ª–æ–≤\n"
                              "1000 - 1999‚ÇΩ        |      5Ô∏è‚É£0Ô∏è‚É£ –±–∞–ª–ª–æ–≤\n"
                              "2000 - 4999‚ÇΩ        |      1Ô∏è‚É£5Ô∏è‚É£0Ô∏è‚É£ –±–∞–ª–ª–æ–≤\n"
                              "5000 - 9999‚ÇΩ        |      3Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£ –±–∞–ª–ª–æ–≤\n"
                              "–æ—Ç 10000‚ÇΩ             |      5Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£ –±–∞–ª–ª–æ–≤\n"
                              "–æ—Ç 20000‚ÇΩ             |      1Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£–±–∞–ª–ª–æ–≤\n"
                              "–æ—Ç 30000‚ÇΩ             |      2Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£–±–∞–ª–ª–æ–≤\n"
                              "–û–±—ã—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞  |     3Ô∏è‚É£ –±–∞–ª–ª–∞\n\n"
                              "–ü–æ–¥—Å—á—ë—Ç –±–∞–ª–ª–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ "
                              "–≤–Ω–æ—Å–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª—ã –º–æ–∂–Ω–æ "
                              "—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ.\n"
                              "–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è 25.09.23 - 31.12.23\n"
                              "–ò—Ç–æ–≥–∏ –ø–æ–¥–≤–µ–¥—ë–º 31 –î–µ–∫–∞–±—Ä—è.\n\n"
                              "\U0001F3C6–ì–õ–ê–í–ù–´–ô –ü–†–ò–ó - –¢—Ä–æ—è–∫ 1597. –í–∏–ª—å–Ω–æ, –°–∏–≥–∏–∑–º—É–Ω–¥ –í–∞–∑–∞. –î–∞—Ç–∞ —Å–≤–µ—Ä—Ö—É - RRRR! –†–æ–¥–Ω–∞—è,"
                              "–º–Ω–æ–≥–æ–ª–µ—Ç–Ω—è—è –ø–∞—Ç–∏–Ω–∞! 7500 —Ä—É–±–ª–µ–π!\n"
                              "\U0001F9482 –ú–µ—Å—Ç–æ - –ì—Ä–æ—à 1546. –í–∏–ª—å–Ω–æ, –°–∏–≥–∏–∑–º—É–Ω–¥ –ê–≤–≥—É—Å—Ç\n"
                              "\U0001F9493 –ú–µ—Å—Ç–æ - –ì—Ä–æ—à 1528. –ö—Ä–∞–∫–æ–≤, –°–∏–≥–∏–∑–º—É–Ω–¥ –°—Ç–∞—Ä—ã–π\n"
                              "4 –ú–µ—Å—Ç–æ - –î–≤–æ–π–Ω–æ–π –¥–µ–Ω–∞—Ä–∏–π 1567 –≥. –°–∏–≥–∏–∑–º—É–Ω–¥ II –ê–≤–≥—É—Å—Ç, –í–ö–õ\n"
                              "5 –ú–µ—Å—Ç–æ - 2 –º–∞—Ä–∫–∏ 1906–≥.–í—é—Ä—Ç–µ–º–±–µ—Ä–≥\n"
                              "6 –ú–µ—Å—Ç–æ - –ú–µ–¥–Ω—ã–π —Å–æ–ª–∏–¥ / –ë–æ—Ä–∞—Ç–∏–Ω–∫–∞ 1666–≥. –Ø–Ω II –ö–∞–∑–∏–º–∏—Ä –í–∞–∑–∞\n"
                              "7 –ú–µ—Å—Ç–æ - 8 –≥—Ä–æ—à–µ–π 1772. –í–∞—Ä—à–∞–≤–∞, –°—Ç–∞–Ω–∏—Å–ª–∞–≤ –ü–æ–Ω—è—Ç–æ–≤—Å–∫–∏–π. –ì–æ–¥ –ø–æ—Ä–µ–∂–µ!\n"
                              "8 –ú–µ—Å—Ç–æ - –û—Ä—Ç 1622. –ë—ã–¥–≥–æ—â, –°–∏–≥–∏–∑–º—É–Ω–¥ –í–∞–∑–∞\n"
                              "9 –ú–µ—Å—Ç–æ - 1 –§–ª–æ—Ä–∏–Ω 1886–≥\n"
                              "10 –ú–µ—Å—Ç–æ - 5 –ú–∞—Ä–æ–∫ –¢—Ä–µ—Ç–∏–π –†–µ–π—Ö\n"
                              "11 –ú–µ—Å—Ç–æ - –¢—Ä–æ—è–∫ 1601. –ö—Ä–∞–∫–æ–≤, –°–∏–≥–∏–∑–º—É–Ω–¥ –í–∞–∑–∞\n"
                              "12 –ú–µ—Å—Ç–æ - –î–µ–Ω–∞—Ä–∏–π 1546. –í–∏–ª—å–Ω–æ, –°–∏–≥–∏–∑–º—É–Ω–¥ –ê–≤–≥—É—Å—Ç. –†–µ–¥–∫–∏–π!\n"
                              "–£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ –∏ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!.",
                              call.message.chat.id, call.message.message_id,
                              reply_markup=create_universal_inline_keyb(Return_to_menu_keyb_dct))
    if call.data.split(':')[1] == "top":
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç c top —é–∑–µ—Ä–∞–º–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∞–ª–ª–æ–≤")
        top_users_lst = [f"{i[0][:3] if len(i[0]) >= 3 else i[0][:1]} | –ë–∞–ª–ª–æ–≤: {i[1]}\n" for i in
                         conn.execute(f"SELECT DISTINCT full_name, try_strike FROM Clients ORDER BY try_strike DESC")]
        print(top_users_lst)
        result = f""
        num = 1
        if len(top_users_lst) > 12:
            for user in top_users_lst:
                result += f"{num}) {user}"
                num += 1
        else:
            for user in top_users_lst[:]:
                result += f"{num}) {user}"
                num += 1
        print(result)
        bot.edit_message_text(f"{result}",
                              call.message.chat.id, call.message.message_id,
                              reply_markup=create_universal_inline_keyb(Return_to_menu_keyb_dct))
    if call.data.split(':')[1] == "stats":
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç c–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —É—á–∞—Å—Ç–∏—è —é–∑–µ—Ä–∞ –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö")
        user_telegram_id = call.message.chat.id
        try:
            with conn:
                trade_info_lst = [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE trades_status = 'finished'")]
        except Exception as e:
            print(e)
        print(trade_info_lst)
        result = ""
        for info in trade_info_lst:
            trade_info = json.loads(info)
            if str(user_telegram_id) in trade_info:
                trade_number = trade_info_lst.index(info) + 1
                max_user_bid = trade_info[str(user_telegram_id)][1]
                number_of_bids = trade_info["bid_history"].count(user_telegram_id)
                try:
                    with conn:
                        lot_id = [i[1] for i in conn.execute(f"SELECT * FROM Trades WHERE id = {trade_number}")][0]
                        lot_name = [i[1] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {lot_id}")][0]
                        max_price = [i[4] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = {trade_number}")][0]
                except Exception as e:
                    print(e)
                if user_telegram_id in trade_info["bid_history"] and trade_info["bid_history"][-1] == user_telegram_id:
                    result += f"–õ–æ—Ç {trade_number}: {lot_name} - –≤—ã–∏–≥—Ä–∞–Ω. –°–¥–µ–ª–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: {number_of_bids}. " \
                              f"–í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {max_price} —Ä—É–±.\n"
                if user_telegram_id in trade_info["bid_history"] and trade_info["bid_history"][-1] != user_telegram_id:
                    result += f"–õ–æ—Ç {trade_number}: {lot_name} -  –Ω–µ –≤—ã–∏–≥—Ä–∞–Ω. –°–¥–µ–ª–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: {number_of_bids}. " \
                              f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {max_user_bid} —Ä—É–±.\n"

        if len(result) > 0:
            result = "–í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–æ—Ä–≥–∞—Ö –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ª–æ—Ç–∞–º:\n" + result
        else:
            result = "–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–æ—Ä–≥–∞—Ö –ª–∏–±–æ —Ç–æ—Ä–≥–∏ –ø–æ –ª–æ—Ç—É –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å\n"
        print(result)
        bot.edit_message_text(f"{result}",
                              call.message.chat.id, call.message.message_id,
                              reply_markup=create_universal_inline_keyb(Return_to_menu_keyb_dct))
    if call.data.split(':')[0] == "bid":
        current_bid = int(call.data.split(':')[1])
        current_lot_id = call.data.split(':')[2]
        print("—Å—Ç–∞–≤–∫–∞", current_bid)
        print("–ª–æ—Ç", current_lot_id)
        try:
            with conn:
                # –ü–æ–ª—É—á–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É
                trade_info_str = [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = {current_lot_id}")][
                    0]
        except Exception as e:
            print(e)
        trade_info = json.loads(trade_info_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
        print("–ò–Ω—Ñ–∞ –ø–æ —Ç–æ—Ä–≥–∞–º", trade_info)
        last_bid_id = trade_info["bid_history"][-1]
        print("-0- –Æ–∑–µ—Ä —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–æ–π", last_bid_id, type(last_bid_id))
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ—Ä–≥–∞–º –∏ —Å—Ç–∞–≤–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç (—Å–ª–æ–≤–∞—Ä—å)
        # user_telegram_id = call.message.from_user.id
        user_telegram_id = call.message.chat.id
        # user_telegram_username = call.message.from_user.username
        # user_first_name = call.message.from_user.first_name
        # user_last_name = call.message.from_user.last_name
        print("–∞–π–¥–∏ —é–∑–µ—Ä–∞", user_telegram_id)

        with conn:
            end_time = [i[8] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
        current_datetime = DT.datetime.now()
        if datetime.strptime(str(current_datetime)[:19], "%Y-%m-%d %H:%M:%S") < datetime.strptime(end_time[0][:19],
                                                                                                  "%Y-%m-%d %H:%M:%S"):
            print("–∞—É–∫ –µ—â–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏")
            if str(user_telegram_id) not in trade_info:
                print("—Ä–∞–Ω—å—à–µ –Ω–µ –¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É")
                print("-1- –Æ–∑–µ—Ä —Å –ø–æ—Å–ª–µ–¥–µ–Ω–µ–π —Å—Ç–∞–≤–∫–æ–π", last_bid_id, type(last_bid_id))
                max_price = [i[4] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = "
                                                        f"{current_lot_id}")][0] + current_bid
                trade_info[str(user_telegram_id)] = [current_bid, max_price]  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —é–∑–µ—Ä–∞ –∏ —Å—Ç–∞–≤–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫
                trade_info["bid_history"].append(user_telegram_id)
                trade_info_str = json.dumps(trade_info)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î


                with conn:
                    conn.execute("UPDATE Trades SET trade_info = ? WHERE lots_id = ?",
                                 (trade_info_str, current_lot_id))  # –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ—Ä–≥—É "Trades"
                    conn.execute("UPDATE Trades SET max_price = ? WHERE lots_id = ?",
                                 (max_price, current_lot_id))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –ª–æ—Ç–∞ –≤ "Trades"
                    conn.execute("UPDATE Clients SET try_strike = ? WHERE telegram_id = ?",
                                 (3, user_telegram_id))
                conn.commit()


                with conn:
                    name = [i[1] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    description = [i[2] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    start_price = [i[3] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    link_seller = [i[4] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    photo_1 = [i[5] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    geolocations = [i[6] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    start_time = [i[7] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    end_time = [i[8] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                try:
                    with conn:
                        # –ü–æ–ª—É—á–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É
                        trade_info_str = \
                        [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = {current_lot_id}")][0]
                except Exception as e:
                    print(e)
                bids_dct = json.loads(trade_info_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
                sorted_bids_dct = sorted(bids_dct.items(), key=lambda x: x[1][1], reverse=True)
                print(sorted_bids_dct)
                top_bids = ""  # —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞
                medal_places = ['\U0001F947', '\U0001F948', '\U0001F949']  # —ç–º–æ–¥–∂–∏ –º–µ–¥–∞–ª–µ–∫: –≥–æ–ª–¥, —Å–∏–ª–≤–µ—Ä, –±—Ä–æ–Ω–∑
                if 0 < len(sorted_bids_dct) < 4:
                    for i in range(1, len(sorted_bids_dct)):
                        print(f"{sorted_bids_dct[i][0]}: {sorted_bids_dct[i][1][1]}")
                        with conn:
                            auc_participant_name = [i[1] for i in conn.execute(
                                f"SELECT * FROM Clients WHERE telegram_id = {sorted_bids_dct[i][0]}")][0]
                        if len(auc_participant_name) > 3:
                            auc_participant_name = f"{auc_participant_name[:3]}***"
                        else:
                            auc_participant_name = f"{auc_participant_name[:1]}***"
                        top_bids += f"{medal_places[i - 1]}{sorted_bids_dct[i][1][1]}BYN({auc_participant_name})\n"
                else:
                    for i in range(1, 4):
                        print(f"{sorted_bids_dct[i][0]}: {sorted_bids_dct[i][1][1]}")
                        with conn:
                            auc_participant_name = [i[1] for i in conn.execute(
                                f"SELECT * FROM Clients WHERE telegram_id = {sorted_bids_dct[i][0]}")][0]
                        if len(auc_participant_name) > 3:
                            auc_participant_name = f"{auc_participant_name[:3]}***"
                        else:
                            auc_participant_name = f"{auc_participant_name[:1]}***"
                        top_bids += f"{medal_places[i - 1]}{sorted_bids_dct[i][1][1]}BYN({auc_participant_name})\n"

                result = f"–ù–æ–º–µ—Ä –ª–æ—Ç–∞: {current_lot_id}\n" \
                         f"–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {name[0]}\n" \
                         f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[0]}\n" \
                         f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞: {geolocations[0]}\n" \
                         f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {link_seller[0]}\n" \
                         f"–í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: {current_bid} —Ä—É–±.\n" \
                         f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–∞: {max_price} —Ä—É–±.\n\n" \
                         f"\U0001F4B0–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {start_price[0]} —Ä—É–±.\n" \
                         f"{top_bids}"
                print(result)
                with open(r'C:/Users/voyag/PycharmProjects/django_last_project/django_last_project/auctions/media/' + str(
                        photo_1[0]), "rb") as img:
                    bot.edit_message_media(media=InputMediaPhoto(img, caption=result), chat_id=call.message.chat.id,
                                           message_id=call.message.message_id,
                                           reply_markup=create_trade_inline_keyb(Trade_inline_keyb_dct,
                                                                                 current_lot_id))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                msg = bot.send_message(call.message.chat.id, f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ {current_bid} —Ä—É–±. –ø—Ä–∏–Ω—è—Ç–∞.")
                time.sleep(3)
                bot.delete_message(call.message.chat.id, msg.message_id)
            else:
                try:
                    with conn:
                        # –ü–æ–ª—É—á–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É
                        trade_info_str = [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = "
                                                                     f"{current_lot_id}")][0]
                except Exception as e:
                    print(e)
                trade_info = json.loads(trade_info_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
                print("–ò–Ω—Ñ–∞ –ø–æ —Ç–æ—Ä–≥–∞–º", trade_info)
                last_bid_id = trade_info["bid_history"][-1]
                print("-0- –Æ–∑–µ—Ä —Å –ø–æ—Å–ª–µ–¥–µ–Ω–µ–π —Å—Ç–∞–≤–∫–æ–π", last_bid_id, type(last_bid_id))
                if user_telegram_id != last_bid_id:
                    print("—Ä–∞–Ω—å—à–µ –¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É, –Ω–æ –µ–µ –ø–µ—Ä–µ–±–∏–ª–∏", user_telegram_id, )
                    print("-2- –Æ–∑–µ—Ä —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–æ–π", last_bid_id, type(last_bid_id))
                    max_price = [i[4] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = "
                                                            f"{current_lot_id}")][0] + current_bid
                    trade_info[str(user_telegram_id)] = [current_bid, max_price]
                    trade_info["bid_history"].append(user_telegram_id)
                    trade_info_str = json.dumps(trade_info)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
                    with conn:
                        conn.execute("UPDATE Trades SET trade_info = ? WHERE lots_id = ?",
                                     (trade_info_str, current_lot_id))  # –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É "Trades"
                        conn.execute("UPDATE Trades SET max_price = ? WHERE lots_id = ?",
                                     (max_price, current_lot_id))  # –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É "Trades"
                        conn.execute("UPDATE Clients SET try_strike = ? WHERE telegram_id = ?",
                                     (3, user_telegram_id))
                    conn.commit()
                    with conn:
                        name = [i[1] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        description = [i[2] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        start_price = [i[3] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        link_seller = [i[4] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        photo_1 = [i[5] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        geolocations = [i[6] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        start_time = [i[7] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        end_time = [i[8] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    try:
                        with conn:
                            # –ü–æ–ª—É—á–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É
                            trade_info_str = [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = "
                                                                         f"{current_lot_id}")][0]
                    except Exception as e:
                        print(e)
                    bids_dct = json.loads(trade_info_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
                    sorted_bids_dct = sorted(bids_dct.items(), key=lambda x: x[1][1], reverse=True)
                    print("-2- –í—ã–±–æ—Ä–∫–∞ —Ç–æ–ø–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", sorted_bids_dct)
                    top_bids = ""  # —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞
                    medal_places = ['\U0001F947', '\U0001F948', '\U0001F949']  # —ç–º–æ–¥–∂–∏ –º–µ–¥–∞–ª–µ–∫ –≥–æ–ª–¥ —Å–∏–ª–≤–µ—Ä –±—Ä–æ–Ω–∑
                    if 0 < len(sorted_bids_dct) < 4:
                        for i in range(1, len(sorted_bids_dct)):
                            print(f"{sorted_bids_dct[i][0]}: {sorted_bids_dct[i][1][1]}")
                            with conn:
                                auc_participant_name = [i[1] for i in conn.execute(
                                    f"SELECT * FROM Clients WHERE telegram_id = {sorted_bids_dct[i][0]}")][0]
                            if len(auc_participant_name) > 3:
                                auc_participant_name = f"{auc_participant_name[:3]}***"
                            else:
                                auc_participant_name = f"{auc_participant_name[:1]}***"
                            top_bids += f"{medal_places[i - 1]}{sorted_bids_dct[i][1][1]}BYN({auc_participant_name})\n"
                    else:
                        for i in range(1, 4):
                            print(f"{sorted_bids_dct[i][0]}: {sorted_bids_dct[i][1][1]}")
                            with conn:
                                auc_participant_name = [i[1] for i in conn.execute(
                                    f"SELECT * FROM Clients WHERE telegram_id = {sorted_bids_dct[i][0]}")][0]
                            if len(auc_participant_name) > 3:
                                auc_participant_name = f"{auc_participant_name[:3]}***"
                            else:
                                auc_participant_name = f"{auc_participant_name[:1]}***"
                            top_bids += f"{medal_places[i - 1]}{sorted_bids_dct[i][1][1]}BYN({auc_participant_name})\n"
                    result = f"–ù–æ–º–µ—Ä –ª–æ—Ç–∞: {current_lot_id}\n" \
                             f"–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {name[0]}\n" \
                             f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[0]}\n" \
                             f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞: {geolocations[0]}\n" \
                             f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {link_seller[0]}\n" \
                             f"–í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: {current_bid} —Ä—É–±.\n" \
                             f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–∞: {max_price} —Ä—É–±.\n\n" \
                             f"\U0001F4B0–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {start_price[0]} —Ä—É–±.\n" \
                             f"{top_bids}"
                    print(result)
                    with open(
                            r'C:/Users/voyag/PycharmProjects/django_last_project/django_last_project/auctions/media/' + str(
                                    photo_1[0]), "rb") as img:
                        bot.edit_message_media(media=InputMediaPhoto(img, caption=result), chat_id=call.message.chat.id,
                                               message_id=call.message.message_id,
                                               reply_markup=create_trade_inline_keyb(Trade_inline_keyb_dct,
                                                                                     current_lot_id))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    msg = bot.send_message(call.message.chat.id, f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ {current_bid} —Ä—É–±. –ø—Ä–∏–Ω—è—Ç–∞")
                    time.sleep(3)
                    bot.delete_message(call.message.chat.id, msg.message_id)

                if user_telegram_id == last_bid_id:
                    print("—Ä–∞–Ω—å—à–µ –¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É, –∏ –æ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è, —Ç.–µ. –µ–µ –Ω–µ –ø–µ—Ä–µ–±–∏–≤–∞–ª–∏")
                    print("-3- –Æ–∑–µ—Ä —Å –ø–æ—Å–ª–µ–¥–µ–Ω–µ–π —Å—Ç–∞–≤–∫–æ–π", last_bid_id, type(last_bid_id))
                    current_bid = int(call.data.split(':')[1])
                    current_lot_id = call.data.split(':')[2]
                    try:
                        with conn:
                            # –ü–æ–ª—É—á–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É
                            trade_info_str = \
                            [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = {current_lot_id}")][0]
                    except Exception as e:
                        print(e)
                    trade_info = json.loads(trade_info_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ—Ä–≥–∞–º –∏ —Å—Ç–∞–≤–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç (—Å–ª–æ–≤–∞—Ä—å)
                    user_telegram_id = call.message.from_user.id
                    user_telegram_id = call.message.chat.id
                    user_telegram_username = call.message.from_user.username
                    user_first_name = call.message.from_user.first_name
                    user_last_name = call.message.from_user.last_name
                    print(user_telegram_id)
                    max_price = [i[4] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = "
                                                            f"{current_lot_id}")][0]
                    with conn:
                        name = [i[1] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        description = [i[2] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        start_price = [i[3] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        link_seller = [i[4] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        photo_1 = [i[5] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        geolocations = [i[6] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        start_time = [i[7] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                        end_time = [i[8] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    try:
                        with conn:
                            trade_info_str = \
                                [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = {current_lot_id}")][0]
                    except Exception as e:
                        print(e)
                    bids_dct = json.loads(trade_info_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
                    sorted_bids_dct = sorted(bids_dct.items(), key=lambda x: x[1][1], reverse=True)
                    print(sorted_bids_dct)
                    top_bids = ""  # —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞
                    medal_places = ['\U0001F947', '\U0001F948', '\U0001F949']  # —ç–º–æ–¥–∂–∏ –º–µ–¥–∞–ª–µ–∫ –≥–æ–ª–¥ —Å–∏–ª–≤–µ—Ä –±—Ä–æ–Ω–∑
                    if 0 < len(sorted_bids_dct) < 4:
                        for i in range(1, len(sorted_bids_dct)):
                            print(f"{sorted_bids_dct[i][0]}: {sorted_bids_dct[i][1][1]}")
                            with conn:
                                auc_participant_name = [i[1] for i in conn.execute(
                                    f"SELECT * FROM Clients WHERE telegram_id = {sorted_bids_dct[i][0]}")][0]
                            if len(auc_participant_name) > 3:
                                auc_participant_name = f"{auc_participant_name[:3]}***"
                            else:
                                auc_participant_name = f"{auc_participant_name[:1]}***"
                            top_bids += f"{medal_places[i - 1]}{sorted_bids_dct[i][1][1]}BYN({auc_participant_name})\n"
                    else:
                        for i in range(1, 4):
                            print(f"{sorted_bids_dct[i][0]}: {sorted_bids_dct[i][1][1]}")
                            with conn:
                                auc_participant_name = [i[1] for i in conn.execute(
                                    f"SELECT * FROM Clients WHERE telegram_id = {sorted_bids_dct[i][0]}")][0]
                            if len(auc_participant_name) > 3:
                                auc_participant_name = f"{auc_participant_name[:3]}***"
                            else:
                                auc_participant_name = f"{auc_participant_name[:1]}***"
                            top_bids += f"{medal_places[i - 1]}{sorted_bids_dct[i][1][1]}BYN({auc_participant_name})\n"
                    current_bid_datetime = DT.datetime.now()
                    result = f"–ù–æ–º–µ—Ä –ª–æ—Ç–∞: {current_lot_id}\n" \
                             f"–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {name[0]}\n" \
                             f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[0]}\n" \
                             f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞: {geolocations[0]}\n" \
                             f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {link_seller[0]}\n" \
                             f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–∞: {max_price} —Ä—É–±.\n\n" \
                             f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ {current_bid} —Ä—É–±. –≤ {str(current_bid_datetime)[:19]} –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞.\n" \
                             f"\U0001F4B0–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {start_price[0]} —Ä—É–±.\n" \
                             f"{top_bids}"
                    print(result)
                    with open(
                            r'C:/Users/voyag/PycharmProjects/django_last_project/django_last_project/auctions/media/' + str(
                                    photo_1[0]), "rb") as img:
                        bot.edit_message_media(media=InputMediaPhoto(img, caption=result), chat_id=call.message.chat.id,
                                               message_id=call.message.message_id,
                                               reply_markup=create_trade_inline_keyb(Trade_inline_keyb_dct,
                                                                                     current_lot_id))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    msg = bot.send_message(call.message.chat.id, f"–í–∞—à–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è, —Å—Ç–∞–≤–∫–∞ –Ω–∞ "
                                                                 f"{current_bid} —Ä—É–±. –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞. C–ª–µ–¥–∏—Ç–µ –∑–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–º, "
                                                                 f"–æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –ª–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å'")
                    time.sleep(3)
                    bot.delete_message(call.message.chat.id, msg.message_id)
        else:
            print("–∞—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
            with conn:
                max_price = [i[4] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = {current_lot_id}")][0]
                name = [i[1] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                description = [i[2] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                start_price = [i[3] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                link_seller = [i[4] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                photo_1 = [i[5] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                geolocations = [i[6] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
            result = f"–ù–æ–º–µ—Ä –ª–æ—Ç–∞: {current_lot_id}\n" \
                     f"–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {name[0]}\n" \
                     f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[0]}\n" \
                     f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞: {geolocations[0]}\n" \
                     f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {link_seller[0]}\n" \
                     f"\U0001F4B0–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {start_price[0]} —Ä—É–±.\n" \
                     f"\U0001F3C1–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω.\n"
            try:
                with conn:
                    trade_info_str = [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = "
                                                                 f"{current_lot_id}")][0]
            except Exception as e:
                print(e)
            trade_info = json.loads(trade_info_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
            msg_id = trade_info["bid_history"][0]
            if len(trade_info["bid_history"]) > 1:
                winner_id = trade_info["bid_history"][-1]
                point_dct = {10: [0, 249], 20: [250, 499], 30: [500, 999], 50: [1000, 1999], 150: [2000, 4999],
                             300: [5000, 9999], 500: [10000, 19999], 1000: [20000, 29999], 2000: [30000, 100000000]}
                point = [i[5] for i in conn.execute(f"SELECT * FROM Clients WHERE telegram_id = {winner_id}")][0]
                for key, value in point_dct.items():
                    if value[0] <= max_price <= value[1]:
                        point += key
                with conn:
                    winner_name = [i[1] for i in conn.execute(f"SELECT * FROM Clients WHERE telegram_id = {winner_id}")][0]
                    conn.execute("UPDATE Clients SET try_strike = ? WHERE telegram_id = ?",
                                 (point, winner_id))
                    conn.execute("UPDATE Trades SET trades_status = ? WHERE lots_id = ?",
                                 ("finished", current_lot_id))  # –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É "Trades"
                    result += f"\U0001F3C6–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name} (–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max_price} —Ä—É–±.)"
            else:
                winner_name = "–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç."
                result += winner_name
            with open(r'C:/Users/voyag/PycharmProjects/django_last_project/django_last_project/auctions/media/' + str(
                    photo_1[0]), "rb") as img:
                bot.edit_message_media(media=InputMediaPhoto(img, caption=result), chat_id=call.message.chat.id,
                                       message_id=call.message.message_id)  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            with open(r'C:/Users/voyag/PycharmProjects/django_last_project/django_last_project/auctions/media/' + str(
                    photo_1[0]), "rb") as img:
                bot.edit_message_media(media=InputMediaPhoto(img, caption=result), chat_id='@coin_minsk',
                                       message_id=msg_id)  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ


    if call.data.split(':')[1] == "update_auction":
        current_lot_id = call.data.split(':')[2]
        try:
            with conn:
                # –ü–æ–ª—É—á–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É
                trade_info_str = [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = "
                                                             f"{current_lot_id}")][0]
        except Exception as e:
            print(e)
        trade_info = json.loads(trade_info_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
        count_bid = len(trade_info["bid_history"])
        last_bid = trade_info["bid_history"][-1]
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ—Ä–≥–∞–º –∏ —Å—Ç–∞–≤–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç (—Å–ª–æ–≤–∞—Ä—å)
        user_telegram_id = call.message.from_user.id
        user_telegram_id = call.message.chat.id
        user_telegram_username = call.message.from_user.username
        user_first_name = call.message.from_user.first_name
        user_last_name = call.message.from_user.last_name
        print(user_telegram_id)
        max_price = [i[4] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = {current_lot_id}")][0]
        with conn:
            name = [i[1] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
            description = [i[2] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
            start_price = [i[3] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
            link_seller = [i[4] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
            photo_1 = [i[5] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
            geolocations = [i[6] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
            start_time = [i[7] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
            end_time = [i[8] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
        try:
            with conn:
                trade_info_str = [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = {current_lot_id}")][
                    0]
        except Exception as e:
            print(e)
        bids_dct = json.loads(trade_info_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
        sorted_bids_dct = sorted(bids_dct.items(), key=lambda x: x[1][1], reverse=True)
        print(sorted_bids_dct)
        top_bids = ""  # —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞
        medal_places = ['\U0001F947', '\U0001F948', '\U0001F949']  # —ç–º–æ–¥–∂–∏ –º–µ–¥–∞–ª–µ–∫ –≥–æ–ª–¥ —Å–∏–ª–≤–µ—Ä –±—Ä–æ–Ω–∑
        if 0 < len(sorted_bids_dct) < 4:
            for i in range(1, len(sorted_bids_dct)):
                print(f"{sorted_bids_dct[i][0]}: {sorted_bids_dct[i][1][1]}")
                with conn:
                    auc_participant_name = \
                        [i[1] for i in
                         conn.execute(f"SELECT * FROM Clients WHERE telegram_id = {sorted_bids_dct[i][0]}")][
                            0]
                if len(auc_participant_name) > 3:
                    auc_participant_name = f"{auc_participant_name[:3]}***"
                else:
                    auc_participant_name = f"{auc_participant_name[:1]}***"
                top_bids += f"{medal_places[i - 1]}{sorted_bids_dct[i][1][1]}BYN({auc_participant_name})\n"
        else:
            for i in range(1, 4):
                print(f"{sorted_bids_dct[i][0]}: {sorted_bids_dct[i][1][1]}")
                with conn:
                    auc_participant_name = \
                        [i[1] for i in
                         conn.execute(f"SELECT * FROM Clients WHERE telegram_id = {sorted_bids_dct[i][0]}")][
                            0]
                if len(auc_participant_name) > 3:
                    auc_participant_name = f"{auc_participant_name[:3]}***"
                else:
                    auc_participant_name = f"{auc_participant_name[:1]}***"
                top_bids += f"{medal_places[i - 1]}{sorted_bids_dct[i][1][1]}BYN({auc_participant_name})\n"
        current_update_datetime = DT.datetime.now()
        result = f"–ù–æ–º–µ—Ä –ª–æ—Ç–∞: {current_lot_id}\n" \
                 f"–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {name[0]}\n" \
                 f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[0]}\n" \
                 f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞: {geolocations[0]}\n" \
                 f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {link_seller[0]}\n" \
                 f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–∞: {max_price} —Ä—É–±.\n\n" \
                 f"\U0001F4B0–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {start_price[0]} —Ä—É–±.\n" \
                 f"{top_bids}\n" \
                 f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(current_update_datetime)[:19]}"
        print(result)
        with open(r'C:/Users/voyag/PycharmProjects/django_last_project/django_last_project/auctions/media/' + str(
                photo_1[0]), "rb") as img:
            bot.edit_message_media(media=InputMediaPhoto(img, caption=result), chat_id=call.message.chat.id,
                                   message_id=call.message.message_id,
                                   reply_markup=create_trade_inline_keyb(Trade_inline_keyb_dct,
                                                                         current_lot_id))  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(call.message.chat.id, f"–î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ –Ω–æ–º–µ—Ä {current_lot_id}: {name[0]} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n"
                                                     f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(current_update_datetime)[:19]}\n"
                                                     f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞–≤–∫–∞–º–∏, –¥–µ–ª–∞–π—Ç–µ –í–∞—à–∏ —Å—Ç–∞–≤–∫–∏!")
        time.sleep(3)
        bot.delete_message(call.message.chat.id, msg.message_id)

        """__________________________________________________________________________________________________________"""
        for i in range(10):  # —Ü–∏–∫–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if check_db(current_lot_id, count_bid, last_bid, user_telegram_id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                print("–∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å—Ç—å, –∫—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É")
                # –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    with conn:
                        trade_info_str = [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = "
                                                                     f"{current_lot_id}")][0]
                except Exception as e:
                    print(e)
                trade_info = json.loads(trade_info_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ—Ä–≥–∞–º –∏ —Å—Ç–∞–≤–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç (—Å–ª–æ–≤–∞—Ä—å)
                max_price = [i[4] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = {current_lot_id}")][0]
                with conn:
                    name = [i[1] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    description = [i[2] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    start_price = [i[3] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    link_seller = [i[4] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    photo_1 = [i[5] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    geolocations = [i[6] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    start_time = [i[7] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                    end_time = [i[8] for i in conn.execute(f"SELECT * FROM Lots WHERE id = {current_lot_id}")]
                try:
                    with conn:
                        trade_info_str = [i[2] for i in conn.execute(f"SELECT * FROM Trades WHERE lots_id = "
                                                                     f"{current_lot_id}")][0]
                except Exception as e:
                    print(e)
                bids_dct = json.loads(trade_info_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
                sorted_bids_dct = sorted(bids_dct.items(), key=lambda x: x[1][1], reverse=True)
                print(sorted_bids_dct)
                top_bids = ""  # —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞
                medal_places = ['\U0001F947', '\U0001F948', '\U0001F949']  # —ç–º–æ–¥–∂–∏ –º–µ–¥–∞–ª–µ–∫ –≥–æ–ª–¥ —Å–∏–ª–≤–µ—Ä –±—Ä–æ–Ω–∑
                if 0 < len(sorted_bids_dct) < 4:
                    for i in range(1, len(sorted_bids_dct)):
                        print(f"{sorted_bids_dct[i][0]}: {sorted_bids_dct[i][1][1]}")
                        with conn:
                            auc_participant_name = \
                                [i[1] for i in
                                 conn.execute(f"SELECT * FROM Clients WHERE telegram_id = {sorted_bids_dct[i][0]}")][
                                    0]
                        if len(auc_participant_name) > 3:
                            auc_participant_name = f"{auc_participant_name[:3]}***"
                        else:
                            auc_participant_name = f"{auc_participant_name[:1]}***"
                        top_bids += f"{medal_places[i - 1]}{sorted_bids_dct[i][1][1]}BYN({auc_participant_name})\n"
                else:
                    for i in range(1, 4):
                        print(f"{sorted_bids_dct[i][0]}: {sorted_bids_dct[i][1][1]}")
                        with conn:
                            auc_participant_name = \
                                [i[1] for i in
                                 conn.execute(f"SELECT * FROM Clients WHERE telegram_id = {sorted_bids_dct[i][0]}")][
                                    0]
                        if len(auc_participant_name) > 3:
                            auc_participant_name = f"{auc_participant_name[:3]}***"
                        else:
                            auc_participant_name = f"{auc_participant_name[:1]}***"
                        top_bids += f"{medal_places[i - 1]}{sorted_bids_dct[i][1][1]}BYN({auc_participant_name})\n"
                current_update_datetime = DT.datetime.now()
                result = f"–ù–æ–º–µ—Ä –ª–æ—Ç–∞: {current_lot_id}\n" \
                         f"–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {name[0]}\n" \
                         f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[0]}\n" \
                         f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞: {geolocations[0]}\n" \
                         f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {link_seller[0]}\n" \
                         f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–∞: {max_price} —Ä—É–±.\n\n" \
                         f"\U0001F4B0–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {start_price[0]} —Ä—É–±.\n" \
                         f"{top_bids}\n" \
                         f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(current_update_datetime)[:19]}"
                with open(
                        r'C:/Users/voyag/PycharmProjects/django_last_project/django_last_project/auctions/media/' + str(
                                photo_1[0]), "rb") as img:
                    bot.edit_message_media(media=InputMediaPhoto(img, caption=result), chat_id=call.message.chat.id,
                                           message_id=call.message.message_id,
                                           reply_markup=create_trade_inline_keyb(Trade_inline_keyb_dct, current_lot_id))
                msg = bot.send_message(call.message.chat.id, f"–°–¥–µ–ª–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞!"
                                                             f"–î–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ –Ω–æ–º–µ—Ä {current_lot_id}: {name[0]} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n"
                                                             f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(current_update_datetime)[:19]}\n"
                                                             f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞–≤–∫–∞–º–∏, –¥–µ–ª–∞–π—Ç–µ –í–∞—à–∏ —Å—Ç–∞–≤–∫–∏!")
                time.sleep(5)
                bot.delete_message(call.message.chat.id, msg.message_id)
            time.sleep(5)  # –ñ–¥–µ–º —Ö —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        """__________________________________________________________________________________________________________"""


print("Ready")
bot.infinity_polling(none_stop=True, interval=0)
